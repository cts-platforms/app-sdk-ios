// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CubicAuth
import AuthenticationServices
@_exported import CubicAuth
import Foundation
import Swift
import UIKit
import WebKit
import _Concurrency
public enum NetworkError : Foundation.LocalizedError {
  case invalidCode(response: Foundation.HTTPURLResponse, responseText: Swift.String)
  case osError(Swift.Error)
  case dataParseFailure(Foundation.Data?)
  case unknownError
}
extension CubicAuth.NetworkError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc public class JWTInfo : ObjectiveC.NSObject {
  @objc final public let cubicId: Swift.String?
  @objc final public let preferredUsername: Swift.String?
  @objc final public let isAnonymous: Swift.Bool
  @objc final public let isTokenValid: Swift.Bool
  @objc final public let isRefreshTokenValid: Swift.Bool
  public init(cubicId: Swift.String?, preferredUsername: Swift.String?, isAnonymous: Swift.Bool, isTokenValid: Swift.Bool, isRefreshTokenValid: Swift.Bool)
  @objc deinit
}
extension CubicAuth.JWTInfo {
  public func requiresFreshLogin() -> Swift.Bool
}
public enum LoggingLevel : Swift.Int {
  case none
  case error
  case info
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class AuthInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc public var accessToken: Swift.String?
  public var expiresIn: Swift.Int?
  final public let refreshExpiresIn: Swift.Int?
  @objc public var refreshToken: Swift.String?
  @objc final public let tokenType: Swift.String?
  @objc final public let idToken: Swift.String?
  final public let notBeforePolicy: Swift.Int?
  @objc public var notBeforePolicyObjC: Foundation.NSNumber? {
    @objc get
  }
  @objc final public let sessionState: Swift.String?
  @objc final public let scope: Swift.String?
  @objc final public let isAnonymous: Swift.Bool
  public init(accessToken: Swift.String?, expiresIn: Swift.Int?, refreshExpiresIn: Swift.Int?, refreshToken: Swift.String?, tokenType: Swift.String?, idToken: Swift.String?, notBeforePolicy: Swift.Int?, sessionState: Swift.String?, scope: Swift.String?, isAnonymous: Swift.Bool)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension CubicAuth.AuthInfo {
  convenience public init(accessToken: Swift.String, refreshToken: Swift.String?)
}
public struct EmptyNetworkResponse : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc public enum Environment : Swift.Int, Swift.CaseIterable {
  case prod
  case sandbox
  case dev
  case moovit
  public var string: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [CubicAuth.Environment]
  public typealias RawValue = Swift.Int
  public static var allCases: [CubicAuth.Environment] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum CubicAuthError : Foundation.LocalizedError {
  case authFailedWithoutOSError
  case authReturnedWithoutJWT
  case clientIdAndSecret
  case memoryReferenceLost
  case refreshTokenMissing
  case noAnonymousAndNoProvider
  case urlCreationFailed
  public static func == (a: CubicAuth.CubicAuthError, b: CubicAuth.CubicAuthError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension CubicAuth.CubicAuthError {
  public var errorDescription: Swift.String? {
    get
  }
}
public typealias JWTToken = Swift.String
public typealias AuthenticationCompletion = (Swift.Result<CubicAuth.AuthInfo, Swift.Error>) -> Swift.Void
public typealias AuthSessionGenerationCompletion = (AuthenticationServices.ASWebAuthenticationSession) -> Swift.Void
public typealias DeviceIdCompletion = (Swift.Int, [Foundation.NSError]) -> Swift.Void
public typealias EmptyCompletionResult = (Swift.Result<CubicAuth.EmptyNetworkResponse, Swift.Error>)
public typealias EmptyCompletion = (CubicAuth.EmptyCompletionResult) -> Swift.Void
public typealias JWTRetrievedCompletion = (Swift.Result<CubicAuth.JWTToken, Swift.Error>) -> Swift.Void
public typealias AuthInfoCompletion = (Swift.Result<CubicAuth.AuthInfo, Swift.Error>) -> Swift.Void
public typealias JWTProviderCompletion = (Swift.Result<(accessToken: CubicAuth.JWTToken, refreshToken: CubicAuth.JWTToken?), Swift.Error>) -> Swift.Void
public typealias JWTProviderClosure = (@escaping CubicAuth.JWTProviderCompletion) -> Swift.Void
public typealias JWTProviderClosureObjC = ((CubicAuth.JWTToken?, Swift.Error?) -> Swift.Void) -> Swift.Void
public typealias AuthenticatedCompletion = (Swift.Bool) -> Swift.Void
public typealias JWTInfoCompletion = (CubicAuth.JWTInfo?) -> Swift.Void
public typealias AccountViewCompletion = (WebKit.WKWebView?, Foundation.NSError?) -> Swift.Void
public typealias AccountURLRequestCompletion = (Foundation.URLRequest?, Foundation.NSError?) -> Swift.Void
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class Auth : ObjectiveC.NSObject {
  @objc public static let shared: CubicAuth.Auth
  public var jwtInfoUpdateClosures: [CubicAuth.JWTInfoCompletion] {
    get
  }
  public var jwtProviderClosure: CubicAuth.JWTProviderClosure? {
    get
  }
  @objc public var jwtProviderClosureObjC: CubicAuth.JWTProviderClosureObjC? {
    @objc get
  }
  @objc public var currentEnvironment: CubicAuth.Environment {
    @objc get
  }
  @objc public var clientId: Swift.String {
    @objc get
  }
  @objc public var clientSecret: Swift.String {
    @objc get
  }
  @objc public var authSession: AuthenticationServices.ASWebAuthenticationSession?
  @objc public var realmName: Swift.String
  @objc public var callbackURLScheme: Swift.String
  @objc public func setEnvironment(_ environment: CubicAuth.Environment)
  @objc public func setClientId(_ clientId: Swift.String, clientSecret: Swift.String)
  @objc public func addJWTInfoUpdateListener(_ jwtInfoUpdateClosure: @escaping CubicAuth.JWTInfoCompletion)
  public func updateJWTProviderClosure(_ jwtProviderClosure: CubicAuth.JWTProviderClosure?)
  @objc public func updateJWTProviderClosureObjC(_ jwtProviderClosureObjC: CubicAuth.JWTProviderClosureObjC?)
  @objc public func isAuthenticated(completion: @escaping CubicAuth.AuthenticatedCompletion)
  @objc public func fetchLocalJWTInfo(completion: @escaping CubicAuth.JWTInfoCompletion)
  @objc public func logout()
  public func retrieveAndRefreshTokenIfNeeded(canUseAnonymous: Swift.Bool, completion: @escaping CubicAuth.JWTRetrievedCompletion)
  @objc public func retrieveAndRefreshTokenIfNeededObjC(canUseAnonymous: Swift.Bool, completion: @escaping ((CubicAuth.JWTToken?, Swift.Error?) -> Swift.Void))
  @objc public func requestJWTInfoUpdate()
  @objc public func getAnonymousId() -> Swift.String?
  @objc public func handleNetworkResponse(_ response: Foundation.HTTPURLResponse?)
  @objc public func handleRefreshReseponse(_ response: Foundation.HTTPURLResponse)
  @available(iOS 13.0, *)
  public func createLogin(presentationContextProvider: AuthenticationServices.ASWebAuthenticationPresentationContextProviding?, prefersEphemeralWebBrowserSession: Swift.Bool, authSessionGeneration: @escaping CubicAuth.AuthSessionGenerationCompletion, authCompletion: @escaping CubicAuth.AuthenticationCompletion)
  @available(iOS 13.0, *)
  @objc public func createLoginObjC(presentationContextProvider: AuthenticationServices.ASWebAuthenticationPresentationContextProviding?, prefersEphemeralWebBrowserSession: Swift.Bool, authSessionGeneration: @escaping CubicAuth.AuthSessionGenerationCompletion, authCompletion: @escaping ((CubicAuth.AuthInfo?, Swift.Error?) -> Swift.Void))
  public func createLogin(prefersEphemeralWebBrowserSession: Swift.Bool, authSessionGeneration: @escaping CubicAuth.AuthSessionGenerationCompletion, authCompletion: @escaping CubicAuth.AuthenticationCompletion)
  @objc public func createLoginObjC(prefersEphemeralWebBrowserSession: Swift.Bool, authSessionGeneration: @escaping CubicAuth.AuthSessionGenerationCompletion, authCompletion: @escaping ((CubicAuth.AuthInfo?, Swift.Error?) -> Swift.Void))
  @available(iOS 13.0, *)
  public func createRegistration(presentationContextProvider: AuthenticationServices.ASWebAuthenticationPresentationContextProviding?, prefersEphemeralWebBrowserSession: Swift.Bool, authSessionGeneration: @escaping CubicAuth.AuthSessionGenerationCompletion, authCompletion: @escaping CubicAuth.AuthenticationCompletion)
  @available(iOS 13.0, *)
  @objc public func createRegistrationObjC(presentationContextProvider: AuthenticationServices.ASWebAuthenticationPresentationContextProviding?, prefersEphemeralWebBrowserSession: Swift.Bool, authSessionGeneration: @escaping CubicAuth.AuthSessionGenerationCompletion, authCompletion: @escaping ((CubicAuth.AuthInfo?, Swift.Error?) -> Swift.Void))
  public func createRegistration(prefersEphemeralWebBrowserSession: Swift.Bool, authSessionGeneration: @escaping CubicAuth.AuthSessionGenerationCompletion, authCompletion: @escaping CubicAuth.AuthenticationCompletion)
  @objc public func createRegistrationObjC(prefersEphemeralWebBrowserSession: Swift.Bool, authSessionGeneration: @escaping CubicAuth.AuthSessionGenerationCompletion, authCompletion: @escaping ((CubicAuth.AuthInfo?, Swift.Error?) -> Swift.Void))
  @objc public func accountPageURLRequest(completion: @escaping CubicAuth.AccountURLRequestCompletion)
  @objc public func accountPage(completion: @escaping CubicAuth.AccountViewCompletion)
  @objc public func deviceId(completion: @escaping CubicAuth.DeviceIdCompletion)
  @objc deinit
}
extension CubicAuth.LoggingLevel : Swift.Equatable {}
extension CubicAuth.LoggingLevel : Swift.Hashable {}
extension CubicAuth.LoggingLevel : Swift.RawRepresentable {}
extension CubicAuth.Environment : Swift.Equatable {}
extension CubicAuth.Environment : Swift.Hashable {}
extension CubicAuth.Environment : Swift.RawRepresentable {}
extension CubicAuth.CubicAuthError : Swift.Equatable {}
extension CubicAuth.CubicAuthError : Swift.Hashable {}
