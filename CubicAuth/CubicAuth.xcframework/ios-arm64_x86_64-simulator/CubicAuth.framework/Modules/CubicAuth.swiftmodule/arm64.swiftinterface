// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios12.1-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CubicAuth
@_exported import CubicAuth
import Foundation
import Swift
import UIKit
public typealias JWTToken = Swift.String
public typealias AuthenticationCompletion = (Swift.Result<CubicAuth.AuthInfo, Swift.Error>) -> Swift.Void
public typealias DeviceIdCompletion = (Swift.Int) -> Swift.Void
public typealias EmptyCompletionResult = (Swift.Result<CubicAuth.EmptyNetworkResponse, Swift.Error>)
public typealias EmptyCompletion = (CubicAuth.EmptyCompletionResult) -> Swift.Void
public typealias JWTRetrievedCompletion = (Swift.Result<CubicAuth.JWTToken, Swift.Error>) -> Swift.Void
public typealias AuthInfoCompletion = (Swift.Result<CubicAuth.AuthInfo, Swift.Error>) -> Swift.Void
public typealias JWTProviderCompletion = (Swift.Result<(accessToken: CubicAuth.JWTToken, refreshToken: CubicAuth.JWTToken?), Swift.Error>) -> Swift.Void
public typealias JWTProviderClosure = (@escaping CubicAuth.JWTProviderCompletion) -> Swift.Void
public typealias JWTProviderClosureObjC = ((CubicAuth.JWTToken?, Swift.Error?) -> Swift.Void) -> Swift.Void
public typealias AuthenticatedCompletion = (Swift.Bool) -> Swift.Void
public typealias JWTInfoCompletion = (CubicAuth.JWTInfo?) -> Swift.Void
@_hasMissingDesignatedInitializers public class Auth {
  public static let shared: CubicAuth.Auth
  public var jwtInfoUpdateClosure: CubicAuth.JWTInfoCompletion? {
    get
  }
  public var jwtProviderClosure: CubicAuth.JWTProviderClosure? {
    get
  }
  public var jwtProviderClosureObjC: CubicAuth.JWTProviderClosureObjC? {
    get
  }
  public var currentEnvironment: CubicAuth.Environment {
    get
  }
  public var clientId: Swift.String {
    get
  }
  public var clientSecret: Swift.String {
    get
  }
  public var realmName: Swift.String
  public func setEnvironment(_ environment: CubicAuth.Environment)
  public func setClientId(_ clientId: Swift.String, clientSecret: Swift.String)
  public func updateJWTInfoUpdateClosure(_ jwtInfoUpdateClosure: @escaping CubicAuth.JWTInfoCompletion)
  public func updateJWTProviderClosure(_ jwtProviderClosure: CubicAuth.JWTProviderClosure?)
  public func updateJWTProviderClosureObjC(_ jwtProviderClosureObjC: CubicAuth.JWTProviderClosureObjC?)
  public func isAuthenticated(completion: @escaping CubicAuth.AuthenticatedCompletion)
  public func fetchLocalJWTInfo(completion: @escaping CubicAuth.JWTInfoCompletion)
  public func logout()
  public func retrieveAndRefreshTokenIfNeeded(canUseAnonymous: Swift.Bool, completion: @escaping CubicAuth.JWTRetrievedCompletion)
  public func requestJWTInfoUpdate()
  public func getAnonymousId() -> Swift.String?
  public func handleNetworkResponse(_ response: Foundation.HTTPURLResponse?)
  public func handleRefreshReseponse(_ response: Foundation.HTTPURLResponse)
  public func deviceId(completion: @escaping CubicAuth.DeviceIdCompletion)
  @objc deinit
}
public struct EmptyNetworkResponse : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct AuthInfo : Swift.Codable {
  public var accessToken: Swift.String?
  public let expiresIn: Swift.Int?
  public let refreshExpiresIn: Swift.Int?
  public var refreshToken: Swift.String?
  public let tokenType: Swift.String?
  public let idToken: Swift.String?
  public let notBeforePolicy: Swift.Int?
  public let sessionState: Swift.String?
  public let scope: Swift.String?
  public let isAnonymous: Swift.Bool
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension AuthInfo {
  public init(accessToken: Swift.String, refreshToken: Swift.String?)
}
public enum LoggingLevel : Swift.Int {
  case none
  case error
  case info
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum CubicAuthError : Foundation.LocalizedError {
  case authFailedWithoutOSError
  case authReturnedWithoutJWT
  case clientIdAndSecret
  case memoryReferenceLost
  case refreshTokenMissing
  case noAnonymousAndNoProvider
  public static func == (a: CubicAuth.CubicAuthError, b: CubicAuth.CubicAuthError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension CubicAuthError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum Environment : Swift.String, Swift.CaseIterable {
  case prod
  case sandbox
  case dev
  case moovit
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [CubicAuth.Environment]
  public static var allCases: [CubicAuth.Environment] {
    get
  }
}
public enum NetworkError : Foundation.LocalizedError {
  case invalidCode(response: Foundation.HTTPURLResponse, responseText: Swift.String)
  case osError(Swift.Error)
  case dataParseFailure(Foundation.Data?)
  case unknownError
}
extension NetworkError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct JWTInfo {
  public let cubicId: Swift.String?
  public let preferredUsername: Swift.String?
  public let isAnonymous: Swift.Bool?
}
extension CubicAuth.LoggingLevel : Swift.Equatable {}
extension CubicAuth.LoggingLevel : Swift.Hashable {}
extension CubicAuth.LoggingLevel : Swift.RawRepresentable {}
extension CubicAuth.CubicAuthError : Swift.Equatable {}
extension CubicAuth.CubicAuthError : Swift.Hashable {}
extension CubicAuth.Environment : Swift.Equatable {}
extension CubicAuth.Environment : Swift.Hashable {}
extension CubicAuth.Environment : Swift.RawRepresentable {}
