// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name UmoPass
import AVFoundation
import CommonCrypto
import CoreLocation
import Foundation
import Swift
import UIKit
@_exported import UmoPass
public struct Agency {
  public let id: Swift.Int
  public let publicId: Swift.String
  public let name: Swift.String
  public let supportedCardTypes: [UmoPass.CardType]
  public let allowStoredValue: Swift.Bool
  public let autoloadMinimumAmount: Swift.Double?
  public let logoURL: Foundation.URL?
  public let shortName: Swift.String
}
public typealias EmptyCompletion = (Swift.Result<UmoPass.EmptyResponse, Swift.Error>) -> Swift.Void
public typealias UserCompletion = ((Swift.Result<UmoPass.User, Swift.Error>) -> Swift.Void)
public typealias ValidityCompletion = ((Swift.Result<UmoPass.EmptyResponse, Swift.Error>) -> Swift.Void)
public typealias AgencyListCompletion = (Swift.Result<[UmoPass.Agency], Swift.Error>) -> Swift.Void
public typealias AgencyCompletion = (Swift.Result<UmoPass.Agency, Swift.Error>) -> Swift.Void
public typealias FareProductsCompletion = (Swift.Result<[UmoPass.PassProduct], Swift.Error>) -> Swift.Void
public typealias BalancePurchaseCompletion = (Swift.Result<UmoPass.PurchaseValueResult, Swift.Error>) -> Swift.Void
public typealias PassPurchaseCompletion = (Swift.Result<UmoPass.PurchasePassResult, Swift.Error>) -> Swift.Void
public typealias TransactionCompletion = (Swift.Result<[UmoPass.Transaction], Swift.Error>) -> Swift.Void
public typealias WalletsCompletion = (Swift.Result<[UmoPass.Wallet], Swift.Error>) -> Swift.Void
public typealias RedemptionCompletion = (Swift.Result<UmoPass.RedeemBenefitResponse, Swift.Error>) -> Swift.Void
public typealias VisValValidCompletion = (Swift.Result<UmoPass.VehicleData, Swift.Error>) -> Swift.Void
public typealias VisValTransactionCompletion = (Swift.Result<UmoPass.VisValResponseModel, Swift.Error>) -> Swift.Void
public typealias DeviceIdCompletion = (Swift.Int, [Swift.Error]) -> Swift.Void
public typealias LegacyUsernameCompletion = (Swift.String?) -> Swift.Void
public typealias LegacyPasswordCompletion = (Swift.String?) -> Swift.Void
public typealias QRGenerationCompletion = (UIKit.UIImage?, [Swift.Error]) -> Swift.Void
extension NSNotification.Name {
  public static let PassUserUpdated: Foundation.Notification.Name
  public static let PassProductsShouldBeRefetched: Foundation.Notification.Name
}
@_hasMissingDesignatedInitializers public class Pass {
  public static let shared: UmoPass.Pass
  public var agency: UmoPass.Agency? {
    get
  }
  public var user: UmoPass.User? {
    get
  }
  public var paymentMethod: UmoPass.PaymentMethod? {
    get
  }
  public var currentEnvironment: UmoPass.Environment {
    get
  }
  @objc deinit
}
extension Pass {
  public func setEnvironment(_ environment: UmoPass.Environment)
  public func setAPIKey(_ apiKey: Swift.String)
  public func setUserToken(_ userToken: Swift.String)
  public func setLoggingLevel(_ loggingLevel: UmoPass.LoggingLevel)
}
extension Pass {
  public func isAuthenticated() -> Swift.Bool
  public func checkAvailabilityOfUsername(_ username: Swift.String, completion: @escaping UmoPass.ValidityCompletion)
  public func checkCardValidity(cardNumber: Swift.String, completion: @escaping UmoPass.EmptyCompletion)
  public func signIn(username: Swift.String, password: Swift.String, deviceChangeIfNeeded: Swift.Bool = true, currentLocation: CoreLocation.CLLocationCoordinate2D?, completion: @escaping UmoPass.EmptyCompletion)
  public func register(username: Swift.String, password: Swift.String, phoneNumber: Swift.String?, email: Swift.String?, cardNumber: Swift.String?, currentLocation: CoreLocation.CLLocationCoordinate2D?, completion: @escaping UmoPass.EmptyCompletion)
  public func deviceChange(username: Swift.String, password: Swift.String, completion: @escaping UmoPass.EmptyCompletion)
  public func signOut()
}
extension Pass {
  public func fetchAgencies(completion: @escaping UmoPass.AgencyListCompletion)
  public func fetchAgencies(near location: CoreLocation.CLLocationCoordinate2D, completion: @escaping UmoPass.AgencyListCompletion)
  public func fetchAgency(publicId: Swift.String, completion: @escaping UmoPass.AgencyCompletion)
  public func selectAgency(agency: UmoPass.Agency, completion: @escaping UmoPass.EmptyCompletion)
  public func isAgencyCurrentlySelected(_ agency: UmoPass.Agency) -> Swift.Bool
}
extension Pass {
  public func refetchAndSaveUser(completion: @escaping UmoPass.UserCompletion)
  public func reloginCachedUserIfFound() -> UmoPass.PassError?
  public func userHasPaymentMethod() -> Swift.Bool
  public func convertCardAccountToMobileAccount(username: Swift.String, password: Swift.String, completion: @escaping UmoPass.EmptyCompletion)
  public func getUserKey() -> Swift.String?
}
extension Pass {
  public func addBalance(agencyPublicId: Swift.String? = nil, amount: Swift.Int, completion: @escaping UmoPass.BalancePurchaseCompletion)
  public func fetchFareProducts(agencyPublicId: Swift.String? = nil, completion: @escaping UmoPass.FareProductsCompletion)
  public func purchaseFareProducts(agencyPublicId: Swift.String? = nil, products: [UmoPass.ProductPurchase], completion: @escaping UmoPass.PassPurchaseCompletion)
  public func updateAutoload(enabled: Swift.Bool, amount: Swift.Double, completion: @escaping UmoPass.EmptyCompletion)
  public func fetchWallets(completion: @escaping UmoPass.WalletsCompletion)
}
extension Pass {
  public func addCreditCard(agencyPublicId: Swift.String? = nil, addCardModel: UmoPass.AddCreditCardModel, completion: @escaping UmoPass.EmptyCompletion)
  public func deleteCreditCard(id: Swift.Int, completion: @escaping UmoPass.EmptyCompletion)
  public func validateCreditCardFormat(text: Swift.String?) -> (type: UmoPass.CardType?, valid: Swift.Bool)
}
extension Pass {
  public func fetchRideTransactions(month: Swift.Int, year: Swift.Int, completion: @escaping UmoPass.TransactionCompletion)
  public func fetchNonRideTransactions(month: Swift.Int, year: Swift.Int, completion: @escaping UmoPass.TransactionCompletion)
}
extension Pass {
  public func shoudShowQRCode(accountBalance: Swift.Double? = nil, accountPassCount: Swift.Int? = nil, transferEndDate: Foundation.Date? = nil) -> Swift.Bool
  public func generateQRCode(mediaId: Swift.Int64? = nil, key: Swift.String? = nil, location: CoreLocation.CLLocationCoordinate2D?, completion: @escaping UmoPass.QRGenerationCompletion)
  public func generateRetailBarcode(cardNumber: Swift.String? = nil) -> UIKit.UIImage?
  public func scannerView(delegate: UmoPass.ScannerDelegate?) -> UmoPass.ScannerView
  public func verifyVisualValidationCode(_ code: Swift.String, completion: @escaping UmoPass.VisValValidCompletion)
  public func purchaseVisualValidationRide(code: Swift.String, currentLocation: CoreLocation.CLLocationCoordinate2D?, completion: @escaping UmoPass.VisValTransactionCompletion)
  public func parseVehicleData(code: Swift.String) -> UmoPass.VehicleData?
}
extension Pass {
  public func redeemBenefit(code: Swift.String, shouldRefreshUser: Swift.Bool = true, completion: @escaping UmoPass.RedemptionCompletion)
}
extension Pass {
  @available(*, deprecated, message: "Use legacyUsername(completion:) instead.")
  public func legacyUsername() -> Swift.String?
  @available(*, deprecated, message: "Use legacyPassword(completion:) instead.")
  public func legacyPassword() -> Swift.String?
  public func deleteLegacyUsername()
  public func deleteLegacyPassword()
  public func legacyUsername(completion: @escaping UmoPass.LegacyUsernameCompletion)
  public func legacyPassword(completion: @escaping UmoPass.LegacyPasswordCompletion)
  public func deviceId(completion: @escaping UmoPass.DeviceIdCompletion)
  public func deviceId() -> Swift.Int
  public func deviceIdWithError() -> (deviceId: Swift.Int, errors: [Swift.Error])
  public func updateDeviceId(_ deviceId: Swift.Int) -> Swift.Error?
  public func useKeychainAccessGroup(_ useAccessGroup: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers open class ScannerView : UIKit.UIView, AVFoundation.AVCaptureMetadataOutputObjectsDelegate {
  public var captureSession: AVFoundation.AVCaptureSession!
  public var previewLayer: AVFoundation.AVCaptureVideoPreviewLayer?
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic public func layoutSubviews()
  public func startCapture()
  public func stopCapture()
  @objc public func metadataOutput(_ output: AVFoundation.AVCaptureMetadataOutput, didOutput metadataObjects: [AVFoundation.AVMetadataObject], from connection: AVFoundation.AVCaptureConnection)
  @objc deinit
}
public struct PurchasedPass {
  public enum PassType {
    case calendarBased
    case timeBased
    case tripBased
    public static func == (a: UmoPass.PurchasedPass.PassType, b: UmoPass.PurchasedPass.PassType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public let id: Swift.Int
  public let name: Swift.String
  public let expiration: Foundation.Date?
  public let shortDescription: Swift.String
  public let startExpirationDescription: Swift.String
  public let start: Foundation.Date?
  public let tripsLeft: Swift.Int?
  public let originalTrips: Swift.Int?
  public let duration: Swift.Int
  public let durationUnits: UmoPass.DurationUnits
  public let created: Foundation.Date
  public let renewable: Swift.Bool
  public let autoRenewEnabled: Swift.Bool
  public let passType: UmoPass.PurchasedPass.PassType
  public let passTypeDescription: Swift.String
  public let passProductId: Swift.Int?
  public let cost: UmoPass.Money
}
public enum LoggingLevel : Swift.Int {
  case none
  case error
  case info
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public typealias AgencySelectViewClosure = ((UmoPass.Agency) -> ())
@objc open class AgencySelectViewController : UIKit.UIViewController, UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  final public let tableView: UIKit.UITableView
  final public let agencyList: [UmoPass.Agency]
  public var selectionClosure: UmoPass.AgencySelectViewClosure?
  public init(agencyList: [UmoPass.Agency], selectionClosure: @escaping UmoPass.AgencySelectViewClosure)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  public func configureView()
  public func configureConstraints()
  @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
public struct Wallet {
  public let agencyPublicId: Swift.String
  public let balance: UmoPass.Money?
  public let passes: [UmoPass.PurchasedPass]
  public let fareType: Swift.String?
  public let parentAuthority: Swift.String?
  public let autoloadAmount: Swift.Int?
  public let storedValueAutoload: Swift.Bool
  public let triggerValue: Swift.Int?
}
public struct AddCreditCardModel : Swift.Codable {
  public let creditCard: UmoPass.CreditCardModel
  public let billingAddress: UmoPass.BillingAddressModel
  public init(creditCard: UmoPass.CreditCardModel, billingAddress: UmoPass.BillingAddressModel)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CreditCardModel : Swift.Codable {
  public let cardNumber: Swift.String
  public let cardholderName: Swift.String
  public let cvv: Swift.String
  public let expiration: Swift.String
  public let type: Swift.String
  public init(cardNumber: Swift.String, cardholderName: Swift.String, cvv: Swift.String, expiration: Swift.String, type: UmoPass.CardType)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct BillingAddressModel : Swift.Codable {
  public let city: Swift.String?
  public let country: Swift.String?
  public let stateProvince: Swift.String?
  public let street: Swift.String?
  public let zipPostalCode: Swift.String
  public init(city: Swift.String?, country: Swift.String?, stateProvince: Swift.String?, street: Swift.String?, zipPostalCode: Swift.String)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct User {
  public let balance: Swift.Double
  public let paymentMethod: UmoPass.PaymentMethod?
  public let purchasedPasses: [UmoPass.PurchasedPass]
  public let autoloadEnabled: Swift.Bool
  public let autoloadAmount: Swift.Double
  public let key: Swift.String
  public let mediaId: Swift.Int64
  public let cardNumber: Swift.String
  public let transferEndDate: Foundation.Date
}
extension UIColor {
  public static let umoGray16: UIKit.UIColor
  public static let umoGray24: UIKit.UIColor
  public static let umoGray52: UIKit.UIColor
  public static let umoGray68: UIKit.UIColor
  public static let umoGray93: UIKit.UIColor
  public static let umoStatusCritical: UIKit.UIColor
  public static let umoOrchidPurple: UIKit.UIColor
  public static let umoVioletPurple: UIKit.UIColor
  convenience public init(hex: Swift.String, alpha: CoreGraphics.CGFloat = 1.0)
}
extension UIColor {
  public static func umoGray24(_ traits: UIKit.UITraitCollection) -> UIKit.UIColor
  public static func umoGray52(_ traits: UIKit.UITraitCollection) -> UIKit.UIColor
  public static func umoGray68(_ traits: UIKit.UITraitCollection) -> UIKit.UIColor
  public static func umoGray93(_ traits: UIKit.UITraitCollection) -> UIKit.UIColor
  public static func umoStatusCritical(_ traits: UIKit.UITraitCollection) -> UIKit.UIColor
  public static func umoVioletPurple(_ traits: UIKit.UITraitCollection) -> UIKit.UIColor
  public static func umoWhiteBackground(_ traits: UIKit.UITraitCollection) -> UIKit.UIColor
  public static func umoWhiteText(_ traits: UIKit.UITraitCollection) -> UIKit.UIColor
}
extension NSObject {
  public func setAssociatedObject(_ value: Swift.AnyObject?, associativeKey: Swift.UnsafeRawPointer, policy: ObjectiveC.objc_AssociationPolicy)
  public func getAssociatedObject(_ associativeKey: Swift.UnsafeRawPointer) -> Any?
}
public typealias RedeemFlowCompletion = (() -> ())
@objc open class RedeemViewController : UIKit.UIViewController {
  final public let backButton: UIKit.UIButton
  final public let continueButton: UmoPass.ActivityButton
  final public let titleLabel: UIKit.UILabel
  final public let descriptionLabel: UIKit.UILabel
  public var redeemEntry: UmoPass.RedeemEntryView!
  final public let agencyInfoLabel: UIKit.UILabel
  final public let changeAgencyButton: UmoPass.ActivityButton
  final public let pass: UmoPass.Pass
  final public let codeChunkCount: Swift.Int
  final public let charactersPerChunk: Swift.Int
  public var currentCode: Swift.String
  public var closeButtonCompletion: UmoPass.RedeemFlowCompletion?
  public var checkmarkImage: UIKit.UIImage?
  public var agencySelectedOnce: Swift.Bool
  public init(checkmarkImage: UIKit.UIImage, completion: UmoPass.RedeemFlowCompletion?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  public func configureView()
  public func configureConstraints()
  public func codeIsValid(_ code: Swift.String) -> Swift.Bool
  @objc public func changeAgencyButtonTapped()
  @objc public func continueButtonTapped()
  public func getRedemptionText(response: UmoPass.RedeemBenefitResponse) -> Swift.String
  public func updateAgencyShortName(_ agencyShortName: Swift.String, isPlaceholder: Swift.Bool)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension RedeemViewController : UmoPass.RedeemEntryDelegate {
  public func codeUpdated(_ code: Swift.String)
}
public protocol RedeemEntryDelegate : AnyObject {
  func codeUpdated(_ code: Swift.String)
}
@objc open class RedeemEntryView : UIKit.UIView {
  final public let stackView: UIKit.UIStackView
  final public let shortNameLabel: UIKit.UILabel
  final public let invalidCodeLabel: UIKit.UILabel
  public var agencyShortName: Swift.String
  final public let entryFields: Swift.Int
  final public let charactersPerChunk: Swift.Int
  weak public var delegate: UmoPass.RedeemEntryDelegate?
  public init(entryFields: Swift.Int, charactersPerChunk: Swift.Int)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  public func configureView()
  public func configureConstraints()
  public func updateFullCode()
  public func updateAppearance(invalid: Swift.Bool)
  public func updateAgencyShortName(_ agencyShortName: Swift.String)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
extension RedeemEntryView : UmoPass.CodeChunkDelegate {
  public func chunkUpdated(_ sender: UmoPass.CodeChunkView, code: Swift.String, isComplete: Swift.Bool)
  public func chunkBackspacedOnEmptyFirstCharacter(_ sender: UmoPass.CodeChunkView)
}
public struct VehicleData {
  public let vehicleId: Swift.Int
  public let vehicleName: Swift.String
  public let routeId: Swift.Int
  public let routeName: Swift.String
  public let agencyId: Swift.Int
  public let validThroughYear: Swift.Int
  public let validThroughMonth: Swift.Int
  public let validThroughDay: Swift.Int
}
public struct PurchaseValueResult {
  public let transactionId: Swift.String
  public let valueAddedInCents: Swift.Int
}
public struct EmptyResponse : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum CardType : Swift.String {
  case amex
  case visa
  case masterCard
  case discover
  case jcb
  public static let allCards: [UmoPass.CardType]
  public var regex: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public struct ProductPurchase {
  public init(fareProductId: Swift.Int, quantity: Swift.Int, costPerQuantity: Swift.Int, shouldAutoload: Swift.Bool)
  public init(pass: UmoPass.PassProduct, quantity: Swift.Int, shouldAutoload: Swift.Bool)
}
public struct Transaction : Swift.Codable {
  public let id: Swift.String
  public let transactionDescription: Swift.String
  public let when: Swift.String
  public let type: Swift.String
  public let agencyPublicId: Swift.String?
  public let balance: UmoPass.Money?
  public let fare: UmoPass.Money?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct PaymentMethod {
  public let id: Swift.Int
  public let cardholderName: Swift.String
  public let type: Swift.String
  public let expiration: Swift.String
  public let name: Swift.String
  public let enabled: Swift.Bool
}
public struct RedeemBenefitResponse {
  public enum RedemptionType : Swift.String {
    case passProductOffer
    case passProductIssue
    case fareCode
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public let redeemText: Swift.String?
  public let type: UmoPass.RedeemBenefitResponse.RedemptionType
}
public struct PurchasePassResult {
  public let transactionId: Swift.String
  public let passes: [UmoPass.PurchasedPass]
}
public struct VisValResponseModel : Swift.Codable {
  public let transactionType: Swift.String
  public let fare: UmoPass.Money?
  public let balance: UmoPass.Money?
  public let passUsed: UmoPass.Money?
  public let passExpireMinutes: Swift.Int32?
  public let transferTimeRemaining: Swift.Int32?
  public let numberOfTripsLeft: Swift.Int32?
  public let specialFareUsed: Swift.Bool?
  public let lowBalanceWarning: Swift.Bool
  public let doubleDenied: Swift.Bool
  public let languageCode: Swift.String
  public let transferCredits: Swift.Int32?
  public let eventId: Swift.String
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers open class ActivityButton : UIKit.UIButton {
  public var originalButtonText: Swift.String?
  public var activityIndicator: UIKit.UIActivityIndicatorView?
  public func updateLoadingState(loading: Swift.Bool)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIView {
  public func disableSubviewsAutoresizingMasks()
  public func applyShadow(offset: CoreGraphics.CGSize = CGSize(width: 0, height: 1), radius: CoreGraphics.CGFloat = 1)
  public func applyCorners(radius: CoreGraphics.CGFloat)
  public func applyShadowPath(viewToTrace: UIKit.UIView)
}
extension UIView {
  @discardableResult
  public func pin(to view: UIKit.UIView, sides: [UIKit.UIRectEdge] = [.top, .bottom, .left, .right], insets: UIKit.UIEdgeInsets = .zero) -> [UIKit.NSLayoutConstraint]
  @discardableResult
  public func centerIn(view: UIKit.UIView) -> [UIKit.NSLayoutConstraint]
}
extension UIView {
  public var activityIndicatorView: UIKit.UIActivityIndicatorView {
    get
    set
  }
}
public protocol CodeChunkDelegate : AnyObject {
  func chunkUpdated(_ sender: UmoPass.CodeChunkView, code: Swift.String, isComplete: Swift.Bool)
  func chunkBackspacedOnEmptyFirstCharacter(_ sender: UmoPass.CodeChunkView)
}
@objc open class CodeChunkView : UIKit.UIStackView {
  final public let characterCount: Swift.Int
  weak public var delegate: UmoPass.CodeChunkDelegate?
  public var textFields: [UmoPass.DeleteEmptyTextField]
  public init(characterCount: Swift.Int)
  @objc required dynamic public init(coder: Foundation.NSCoder)
  public func configureView()
  public func createCharacterEntryView() -> UIKit.UIView
  public func focusFirstEmptyField()
  public func getCurrentCode() -> Swift.String
  public func isCompleted() -> Swift.Bool
  public func updateAppearance(invalid: Swift.Bool)
  public func focusAndClearLastCharacter()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
extension CodeChunkView : UIKit.UITextFieldDelegate {
  @objc dynamic public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
}
extension UIButton {
  public func setBackgroundColor(color: UIKit.UIColor, forState: UIKit.UIControl.State)
  public func applyUmoStyle()
  public func applyUmoClearStyle()
}
public enum DurationUnits : Swift.String {
  case minutes
  case hours
  case days
  case weeks
  case months
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public struct PassProduct {
  public let id: Swift.Int
  public let name: Swift.String
  public let duration: Swift.Int
  public let durationUnits: UmoPass.DurationUnits
  public let costInCents: Swift.Int
  public let amountUserCurrentlyOwns: Swift.Int
  public let maxAmountUserCanOwn: Swift.Int
  public let passDescription: Swift.String
  public let renewable: Swift.Bool
}
extension PassProduct {
  public var amountUserCanPurchase: Swift.Int {
    get
  }
}
public protocol ScannerDelegate : AnyObject {
  func failed(error: Swift.Error)
  func foundValidCode(_ code: Swift.String)
}
public enum NetworkError : Foundation.LocalizedError {
  case invalidCode(response: Foundation.HTTPURLResponse, responseText: Swift.String)
  case osError(Swift.Error)
  case dataParseFailure(Foundation.Data?)
  case unknownError
}
extension NetworkError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct Money : Swift.Codable {
  public let currencyCode: Swift.String
  public let units: Swift.Int?
  public let nanos: Swift.Int?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension Money {
  public func formattedString() -> Swift.String?
  public func amountAsDouble() -> Swift.Double
}
extension UIFont {
  public static let c1BodySmall: UIKit.UIFont
  public static let c1Body: UIKit.UIFont
  public static let c1BodySmallStrong: UIKit.UIFont
  public static let c1BodyStrong: UIKit.UIFont
  public static let c1Footnote: UIKit.UIFont
  public static let c1Title: UIKit.UIFont
}
@objc @_inheritsConvenienceInitializers open class LabelCell : UIKit.UITableViewCell {
  final public let containerView: UIKit.UIView
  final public let titleLabel: UIKit.UILabel
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public func configureConstraints()
  public func configureView()
  public func configure(agencyShortName: Swift.String, agencyName: Swift.String)
  @objc deinit
}
public enum PassError : Foundation.LocalizedError {
  case noAgencySelected
  case noPaymentMethodAvailable
  case paymentMethodAlreadyConfigured
  case creditCardTypeNotSupported
  case amountBelowMinimumAutoload
  case notAuthenticated
  case scannerError
  case deviceChangeRequired
  case codeFoundButInvalid
  case memoryReferenceLost
  case vehicleCodeInvalid
  case keyOrMediaIdMissing
  public static func == (a: UmoPass.PassError, b: UmoPass.PassError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension PassError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class DeleteEmptyTextField : UIKit.UITextField {
  @objc override dynamic public func deleteBackward()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc open class RedemptionSuccessViewController : UIKit.UIViewController {
  final public let checkmarkImageView: UIKit.UIImageView
  final public let codeSuccessfulLabel: UIKit.UILabel
  final public let descriptionLabel: UIKit.UILabel
  final public let closeButton: UIKit.UIButton
  final public let redemptionText: Swift.String
  public var closeButtonCompletion: UmoPass.RedeemFlowCompletion?
  public var checkmarkImage: UIKit.UIImage?
  public init(redemptionText: Swift.String, checkmarkImage: UIKit.UIImage?, completion: UmoPass.RedeemFlowCompletion?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  public func configureView()
  public func configureConstraints()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
extension UIViewController {
  @discardableResult
  public func pin(view: UIKit.UIView, sides: [UIKit.UIRectEdge] = [.top, .bottom, .left, .right], insets: UIKit.UIEdgeInsets = .zero) -> [UIKit.NSLayoutConstraint]
}
public enum Environment : Swift.String, Swift.CaseIterable {
  case production
  case sandbox
  case develop
  case moovit
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias AllCases = [UmoPass.Environment]
  public static var allCases: [UmoPass.Environment] {
    get
  }
}
extension UmoPass.PurchasedPass.PassType : Swift.Equatable {}
extension UmoPass.PurchasedPass.PassType : Swift.Hashable {}
extension UmoPass.LoggingLevel : Swift.Equatable {}
extension UmoPass.LoggingLevel : Swift.Hashable {}
extension UmoPass.LoggingLevel : Swift.RawRepresentable {}
extension UmoPass.CardType : Swift.Equatable {}
extension UmoPass.CardType : Swift.Hashable {}
extension UmoPass.CardType : Swift.RawRepresentable {}
extension UmoPass.RedeemBenefitResponse.RedemptionType : Swift.Equatable {}
extension UmoPass.RedeemBenefitResponse.RedemptionType : Swift.Hashable {}
extension UmoPass.RedeemBenefitResponse.RedemptionType : Swift.RawRepresentable {}
extension UmoPass.DurationUnits : Swift.Equatable {}
extension UmoPass.DurationUnits : Swift.Hashable {}
extension UmoPass.DurationUnits : Swift.RawRepresentable {}
extension UmoPass.PassError : Swift.Equatable {}
extension UmoPass.PassError : Swift.Hashable {}
extension UmoPass.Environment : Swift.Equatable {}
extension UmoPass.Environment : Swift.Hashable {}
extension UmoPass.Environment : Swift.RawRepresentable {}
