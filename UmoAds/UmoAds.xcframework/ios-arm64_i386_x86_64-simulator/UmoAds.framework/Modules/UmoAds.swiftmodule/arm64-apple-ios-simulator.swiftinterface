// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name UmoAds
import CoreLocation
import Foundation
import SDWebImage
import SSZipArchive
import Swift
import SystemConfiguration
import UIKit
@_exported import UmoAds
import WebKit
public enum AdSize : Swift.String {
  case mobileBanner
  case largeMobileBanner
  case mediumRectangle
  case html
  case none
  public var size: CoreGraphics.CGSize {
    get
  }
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class GenericAdView : UmoAds.BaseAdView {
  override public init(adSlotId: Swift.String, adSize: UmoAds.AdSize)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  override public func renderAd(adInsertionInfo: UmoAds.AdInsertionInfo) -> Swift.Bool
  override public func adWillExpire() -> Swift.Bool
  @objc deinit
}
public enum LoggingLevel : Swift.Int {
  case none
  case error
  case info
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public protocol AdViewListener {
  func onAdLoadSuccess(adSlotId: Swift.String, rendered: Swift.Bool, adView: UmoAds.BaseAdView)
  func onAdLoadError(adSlotId: Swift.String, error: Swift.Error, adView: UmoAds.BaseAdView)
  func onAdClickShouldOpenLink(adSlotId: Swift.String, url: Foundation.URL?, urlString: Swift.String, adView: UmoAds.BaseAdView) -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc(GPSCoordinates) @objcMembers public class GPSCoordinates : ObjectiveC.NSObject, Swift.Codable {
  @objc public var lat: Swift.Double
  @objc public var lon: Swift.Double
  @objc public var ele: Swift.Double
  @objc public var acc: Swift.Double
  @objc override dynamic public init()
  public init(lat: Swift.Double? = 0.0, lon: Swift.Double? = 0.0, ele: Swift.Double? = 0.0, acc: Swift.Double? = 0.0)
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_hasMissingDesignatedInitializers public class BaseAdView : UIKit.UIView {
  public var adSlotId: Swift.String!
  public var adSize: UmoAds.AdSize
  public var adViewListener: UmoAds.AdViewListener?
  public init(adSlotId: Swift.String, adSize: UmoAds.AdSize)
  @discardableResult
  public func addAspectRatioConstraints() -> UIKit.NSLayoutConstraint
  public func renderAd(adInsertionInfo: UmoAds.AdInsertionInfo) -> Swift.Bool
  public func adWillExpire() -> Swift.Bool
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
public enum Environment : Swift.String, Swift.CaseIterable {
  case develop
  case qa
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias AllCases = [UmoAds.Environment]
  public static var allCases: [UmoAds.Environment] {
    get
  }
}
public struct EmptyResponse : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol AdListener : AnyObject {
  func onAdLoadSuccess(adSlotId: Swift.String, rendered: Swift.Bool, adView: UmoAds.BaseAdView)
  func onAdLoadError(adSlotId: Swift.String, error: Swift.Error, adView: UmoAds.BaseAdView)
  func onAdClickShouldOpenLink(adSlotId: Swift.String, url: Foundation.URL?, urlString: Swift.String, adView: UmoAds.BaseAdView) -> Swift.Bool
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(AdPostInteractionResponseInfo) @objcMembers public class AdPostInteractionResponseInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum AdsError : Foundation.LocalizedError {
  case consumerNotFound
  case transitAgencyIdNotFoundForRefresh
  case consumerIdNotFoundForRefresh
  case clientIdAndSecret
  public static func == (a: UmoAds.AdsError, b: UmoAds.AdsError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension AdsError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum NetworkError : Foundation.LocalizedError {
  case invalidCode(response: Foundation.HTTPURLResponse, responseText: Swift.String)
  case osError(Swift.Error)
  case dataParseFailure(Foundation.Data?)
  case unknownError
}
extension NetworkError {
  public var errorDescription: Swift.String? {
    get
  }
}
public typealias EmptyCompletionResult = (Swift.Result<UmoAds.EmptyResponse, Swift.Error>)
public typealias EmptyCompletion = (UmoAds.EmptyCompletionResult) -> Swift.Void
public typealias JWTToken = Swift.String
public typealias JWTRetrievedCompletion = (Swift.Result<UmoAds.JWTToken, Swift.Error>) -> Swift.Void
public typealias JWTProviderClosure = (@escaping UmoAds.JWTRetrievedCompletion) -> Swift.Void
@_hasMissingDesignatedInitializers public class Ads {
  public static let shared: UmoAds.Ads
  public static let version: Swift.String
  public var jwtTokenProvider: UmoAds.JWTProviderClosure? {
    get
  }
  @objc deinit
}
extension Ads {
  public func setClientId(_ clientId: Swift.String, clientSecret: Swift.String)
  public func setJWTToken(_ jwtToken: Swift.String)
  public func setJWTTokenProvider(callProviderImmediately: Swift.Bool, jwtTokenProvider: UmoAds.JWTProviderClosure?)
  public func logout()
  public func isAuthenticated() -> Swift.Bool
  public func setEnvironment(_ environment: UmoAds.Environment)
  public func getAnonymousId() -> Swift.String?
}
extension Ads {
  public func updateLastKnownLocation(_ location: CoreLocation.CLLocation)
}
extension Ads {
  public func loadAd(adView: UmoAds.BaseAdView, completion: UmoAds.EmptyCompletion? = nil)
  public func setPlaceholderImage(adSize: UmoAds.AdSize, placeholder: UIKit.UIImage)
  public func placeholderImage(adSize: UmoAds.AdSize) -> UIKit.UIImage?
  public func setUniversalAdListener(_ adListener: UmoAds.AdListener)
  public func updateRegionId(_ regionId: Swift.String, shouldRefreshAllAds: Swift.Bool = true)
  public func clearCache()
}
extension Ads {
  public func setLoggerLevel(_ level: UmoAds.LoggingLevel)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(AdInsertionInfo) @objcMembers public class AdInsertionInfo : ObjectiveC.NSObject, Swift.Codable {
  required public init(from decoder: Swift.Decoder)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@_inheritsConvenienceInitializers @objc(AdPostInteractionInfo) @objcMembers public class AdPostInteractionInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(AdResponseinfo) @objcMembers public class AdResponseInfo : ObjectiveC.NSObject, Swift.Codable {
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
extension UmoAds.AdSize : Swift.Equatable {}
extension UmoAds.AdSize : Swift.Hashable {}
extension UmoAds.AdSize : Swift.RawRepresentable {}
extension UmoAds.LoggingLevel : Swift.Equatable {}
extension UmoAds.LoggingLevel : Swift.Hashable {}
extension UmoAds.LoggingLevel : Swift.RawRepresentable {}
extension UmoAds.Environment : Swift.Equatable {}
extension UmoAds.Environment : Swift.Hashable {}
extension UmoAds.Environment : Swift.RawRepresentable {}
extension UmoAds.AdsError : Swift.Equatable {}
extension UmoAds.AdsError : Swift.Hashable {}
